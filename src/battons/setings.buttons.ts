import { Markup } from 'telegraf';
import { BUTTONS } from '../constants';

export function actionButtonsSettings(language: string = 'ua', bossId: number) {
  const baseButtons = [
    [
      Markup.button.callback(BUTTONS[language].FAMILY, 'family'),
      Markup.button.callback(BUTTONS[language].LANGUAGE, 'language'),
    ],
    [Markup.button.callback(BUTTONS[language].RESET, 'reset')],
    [
      Markup.button.callback(BUTTONS[language].GET_PREMIUM, 'premium'),
      Markup.button.callback(BUTTONS[language].BACK, 'back'),
    ],
  ];
  if (bossId === +process.env.BOSID) {
    baseButtons[1].push(Markup.button.callback('–ê–¥–º—ñ–Ωüòé –ø–∞–Ω–µ–ª—åüîì', 'admin'));
  }
  return Markup.inlineKeyboard(baseButtons);
}

export function actionButtonsAdmin(language: string = 'ua') {
  const baseButtons = [
    [Markup.button.callback('–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç—É–∫–∏ –ø–æ –±–æ—Ç—É', 'adminStat')],
    [Markup.button.callback('–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–∏–Ω–∏', 'sendNews')],
    [Markup.button.callback('–ó–∞–≥–ª—É—à–∫–∞', '–ó–∞–≥–ª—É—à–∫–∞'), Markup.button.callback('–ü–æ–≤–∏—Ä–Ω—É—Ç–∏—Å—è ‚Ü©Ô∏è', 'back')],
  ];
  return Markup.inlineKeyboard(baseButtons);
}
export function languageSet() {
  return Markup.inlineKeyboard(
    [Markup.button.callback('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞üá∫üá¶', 'setLanguage:ua'), Markup.button.callback('Englishüá¨üáß', 'setLanguage:en')],
    {
      columns: 2,
    },
  );
}

export function currencySet() {
  return Markup.inlineKeyboard(
    [Markup.button.callback('–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞üá∫üá¶ –≥—Ä–∏–≤–Ω—è', 'UAH'), Markup.button.callback('United States DollarÔπ©', 'USD')],
    { columns: 1 },
  );
}
export function resetButton(language: string = 'ua') {
  return Markup.inlineKeyboard(
    [Markup.button.callback(BUTTONS[language].YES, 'yes'), Markup.button.callback(BUTTONS[language].NO, 'no')],
    {
      columns: 2,
    },
  );
}
