import { Action, Command, Hears, InjectBot, Update } from 'nestjs-telegraf';
import { Logger } from '@nestjs/common';
import { CustomCallbackQuery, IContext } from '../interface/context.interface';
import { groupButton } from '../battons/app.buttons';
import { MyMessage } from '../interface/my-message.interface';
import { Telegraf } from 'telegraf';

@Update()
export class FamilyHandler {
  private readonly logger: Logger = new Logger(FamilyHandler.name);
  constructor(
    @InjectBot()
    private readonly bot: Telegraf<IContext>,
  ) {}
  @Hears('–†–æ–¥–∏–Ω–∞üë®‚Äçüë©‚Äçüëß‚Äçüëß(—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)')
  @Command('group')
  async groupCommand(ctx: IContext) {
    await ctx.reply('–†–æ–¥–∏–Ω–Ω–µ –º–µ–Ω—é:', groupButton());
  }
  @Action('get_id')
  async getId(ctx: IContext) {
    const userId = ctx.from.id;
    await ctx.reply(`get_id: ${userId}`);
  }
  @Action('create_group')
  async createGroup(ctx: IContext) {
    const userId = ctx.from.id;
    if (!ctx.session.group) {
      ctx.session.group = [];
    }
    if (!ctx.session.group.includes(userId)) {
      ctx.session.group.push(userId);
    }
    await ctx.reply('–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞, –≤–∞—à ID –¥–æ–±–∞–≤–ª–µ–Ω');
  }
  @Action('add_to_group')
  async addToGroup(ctx: IContext) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.');
    ctx.session.awaitingUserIdInput = true;
  }
  @Hears(/^\d+$/)
  async addUserId(ctx: IContext) {
    if (ctx.session.awaitingUserIdInput) {
      const message = ctx.message as MyMessage;
      const inputId = parseInt(message.text, 10);
      const userId = ctx.from.id;

      if (!ctx.session.group) {
        ctx.session.group = [];
      }

      if (!ctx.session.group.includes(inputId)) {
        ctx.session.group.push(inputId);
        await this.sendInvite(ctx, inputId, userId);
        await ctx.reply(`–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ${inputId}.`);
      } else {
        await ctx.reply(`ID ${inputId} —É–∂–µ –µ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ.`);
      }

      ctx.session.awaitingUserIdInput = false;
    }
  }
  async sendInvite(ctx: IContext, inputId: number, userId: number) {
    const opts = {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–°–æ–≥–ª–∞—Å–µ–Ω', callback_data: `accept_invite:${userId}` }],
          [{ text: '–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω', callback_data: `decline_invite:${userId}` }],
        ],
      },
    };
    await this.bot.telegram.sendMessage(
      inputId,
      `–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:${userId} . –ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ?`,
      opts,
    );
  }

  @Action(/^accept_invite:\d+$/)
  async acceptInvite(ctx: IContext) {
    const userId = ctx.from.id;
    const callbackQuery: CustomCallbackQuery = ctx.callbackQuery as CustomCallbackQuery;
    const inputId = parseInt(callbackQuery.message.text.split(':')[1], 10);

    if (!ctx.session.group) {
      ctx.session.group = [];
    }

    if (!ctx.session.group.includes(inputId)) {
      ctx.session.group.push(inputId);
      ctx.session.group.push(userId);
    }
    await ctx.reply(`–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${inputId}`);
  }

  @Action(/^decline_invite:\d+$/)
  async declineInvite(ctx: IContext) {
    const userId = ctx.from.id;
    const callbackQuery: CustomCallbackQuery = ctx.callbackQuery as CustomCallbackQuery;
    const inputId = parseInt(callbackQuery.data.split(':')[1], 10);
    if (ctx.session.group && ctx.session.group.includes(userId)) {
      const index = ctx.session.group.indexOf(userId);
      ctx.session.group.splice(index, 1);
    }
    await ctx.reply(`–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${inputId}`);
  }

  @Action('live_group')
  async liveGroup(ctx: IContext) {
    const userId = ctx.from.id;
    if (ctx.session.group && ctx.session.group.includes(userId)) {
      const index = ctx.session.group.indexOf(userId);
      ctx.session.group.splice(index, 1);
      await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É.');
    } else {
      await ctx.reply('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø—ã.');
    }
  }

  @Action('delete_group')
  async deleteGroup(ctx: IContext) {
    if (ctx.session.group && ctx.session.group.length > 0) {
      ctx.session.group = [];
      await ctx.reply('–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.');
    } else {
      await ctx.reply('–ì—Ä—É–ø–ø–∞ —É–∂–µ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    }
  }
}
