import { Action, Command, Hears, Update } from 'nestjs-telegraf';
import { Logger } from '@nestjs/common';
import { IContext } from '../interface/context.interface';
import { groupButton } from '../battons/app.buttons';
import { MyMessage } from '../interface/my-message.interface';

@Update()
export class FamilyHandler {
  private readonly logger: Logger = new Logger(FamilyHandler.name);
  @Hears('–†–æ–¥–∏–Ω–∞üë®‚Äçüë©‚Äçüëß‚Äçüëß(—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)')
  @Command('group')
  async groupCommand(ctx: IContext) {
    await ctx.reply('–†–æ–¥–∏–Ω–Ω–µ –º–µ–Ω—é:', groupButton());
  }

  @Action('get_id')
  async getId(ctx: IContext) {
    const userId = ctx.from.id;
    await ctx.reply(`get_id: ${userId}`);
  }
  @Action('create_group')
  async createGroup(ctx: IContext) {
    const userId = ctx.from.id;
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ group, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç
    if (!ctx.session.group) {
      ctx.session.group = [];
    }
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ id –≤ –º–∞—Å—Å–∏–≤
    if (!ctx.session.group.includes(userId)) {
      ctx.session.group.push(userId);
    }
    await ctx.reply('–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞, –≤–∞—à ID –¥–æ–±–∞–≤–ª–µ–Ω');
  }

  @Action('add_to_group')
  async addToGroup(ctx: IContext) {
    // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ ID
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.');
    ctx.session.awaitingUserIdInput = true;
  }
  @Hears(/^\d+$/) // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–∞—Ç—á–∏–Ω–≥–∞ —Ç–æ–ª—å–∫–æ —á–∏—Å–µ–ª
  async addUserId(ctx: IContext) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ ID
    if (ctx.session.awaitingUserIdInput) {
      const message = ctx.message as MyMessage;
      const inputId = parseInt(message.text, 10);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ group, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç
      if (!ctx.session.group) {
        ctx.session.group = [];
      }

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –≤ –º–∞—Å—Å–∏–≤
      if (!ctx.session.group.includes(inputId)) {
        ctx.session.group.push(inputId);
        await ctx.reply(`ID ${inputId} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.`);
      } else {
        await ctx.reply(`ID ${inputId} —É–∂–µ –µ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ.`);
      }

      // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞
      ctx.session.awaitingUserIdInput = false;
    }
  }

  @Action('live_group')
  async liveGroup(ctx: IContext) {
    const userId = ctx.from.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Å—Å–∏–≤ group –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (ctx.session.group && ctx.session.group.includes(userId)) {
      const index = ctx.session.group.indexOf(userId);

      // –£–¥–∞–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞—Å—Å–∏–≤–∞
      ctx.session.group.splice(index, 1);
      await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä—É–ø–ø—É.');
    } else {
      await ctx.reply('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–∞—Å—Ç—å—é –∫–∞–∫–æ–π-–ª–∏–±–æ –≥—Ä—É–ø–ø—ã.');
    }
  }

  @Action('delete_group')
  async deleteGroup(ctx: IContext) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Å—Å–∏–≤ group –∏ –Ω–µ –ø—É—Å—Ç –ª–∏ –æ–Ω
    if (ctx.session.group && ctx.session.group.length > 0) {
      // –û—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤
      ctx.session.group = [];
      await ctx.reply('–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.');
    } else {
      await ctx.reply('–ì—Ä—É–ø–ø–∞ —É–∂–µ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
    }
  }
}
