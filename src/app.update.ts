import { TransactionService } from './transaction.service';
import { Action, Hears, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import {
  actionButtonsMonths,
  actionButtonsStart,
  actionButtonsStatistics,
  actionButtonsTransaction,
  actionButtonsTransactionNames,
} from './app.buttons';
import { MyMessage } from './interface/my-message.interface';
import { TransactionType } from './mongodb/shemas';
import { Context, CustomCallbackQuery } from './interface/context.interfsce';
import { BalanceService } from './balance.service';
import { Logger } from '@nestjs/common';
@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly transactionService: TransactionService,
    private readonly balanceService: BalanceService,
    private readonly logger: Logger,
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    try {
      const userId = ctx.from.id;
      const user = ctx.from;
      this.logger.log(`
      User ID: ${user.id}
      First Name: ${user.first_name}
      Last Name: ${user.last_name}
      Username: ${user.username}`);
      await this.balanceService.createBalance({ userId });
      await ctx.replyWithHTML(
        `<b>üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. üìò</b>\n` +
          `\n` +
          `<i>–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–µ—Ç–∞ –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞.</i> –° –µ–≥–æ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å <b>–¥–æ—Ö–æ–¥—ã üí∞</b> –∏ <b>—Ä–∞—Å—Ö–æ–¥—ã üìâ</b>,` +
          ` –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ–∫—É—â–µ–º—É –±–∞–ª–∞–Ω—Å—É.\n` +
          `\n` +
          `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è", –∞ –∑–∞—Ç–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ—Å—å —Å —Ç–∏–ø–æ–º: "–ü—Ä–∏—Ö–æ–¥" –∏–ª–∏ "–†–∞—Å—Ö–æ–¥". üìä`,
        actionButtonsStart(),
      );

      await ctx.deleteMessage();
      delete ctx.session.type;
      this.logger.log('startCommand executed successfully');
    } catch (error) {
      this.logger.error('Error in startCommand:', error);
      await ctx.reply('‚õîÔ∏è–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.‚õîÔ∏è');
    }
  }
  @Hears('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è üí∏')
  async aboutCommand(ctx: Context) {
    await ctx.deleteMessage();
    delete ctx.session.type;
    this.logger.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è command executed');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:üîΩ', actionButtonsTransaction());
  }
  @Action('–ü—Ä–∏—Ö–æ–¥')
  async incomeCommand(ctx: Context) {
    ctx.session.type = 'income';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ' + '\n' + '–ü—Ä–∏–º–µ—Ä: "–ó–∞—Ä–ø–ª–∞—Ç–∞ 100000"');
    this.logger.log('–ü—Ä–∏—Ö–æ–¥ command executed');
    await ctx.deleteMessage();
  }
  @Action('–†–∞—Å—Ö–æ–¥')
  async expenseCommand(ctx: Context) {
    ctx.session.type = 'expense';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª' + '\n' + '–ü—Ä–∏–º–µ—Ä: "–ü—Ä–æ–¥—É–∫—Ç—ã 1000"');
    this.logger.log('–†–∞—Å—Ö–æ–¥ command executed');
    await ctx.deleteMessage();
  }
  @Action('–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—ÖÔ∏è')
  async deleteLastCommand(ctx: Context) {
    const userId = ctx.from.id;
    ctx.session.type = 'delete';
    await this.transactionService.showLastNTransactionsWithDeleteOption(userId, 10);
  }
  @Action('–ú–æ–∏ –ø—Ä–∏—Ö–æ–¥—ã')
  async incomeListCommand(ctx: Context) {
    this.logger.log('–ø—Ä–∏—Ö–æ–¥—ã command executed');
    const userId = ctx.from.id;
    await this.transactionService.getTransactionsByType(userId, TransactionType.INCOME);
    this.logger.log('–ø—Ä–∏—Ö–æ–¥—ã command executed');
  }
  @Action(/delete_(.+)/)
  async handleCallbackQuery(ctx: Context) {
    try {
      if (ctx.session.type !== 'delete') {
        return;
      }
      await ctx.deleteMessage();

      const customCallbackQuery: CustomCallbackQuery = ctx.callbackQuery as CustomCallbackQuery;

      if (customCallbackQuery && 'data' in customCallbackQuery) {
        const callbackData = customCallbackQuery.data;
        const userId = ctx.from.id;
        if (callbackData.startsWith('delete_')) {
          const transactionIdToDelete = callbackData.replace('delete_', '');
          await this.transactionService.deleteTransactionById(userId, transactionIdToDelete);
          await ctx.answerCbQuery('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞');
          delete ctx.session.type;
        }
      } else {
        this.logger.error('customCallbackQuery is undefined or does not contain data');
      }
    } catch (error) {
      this.logger.error('Error in handleCallbackQuery:', error);
      await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  }
  @Action('–ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã')
  async expenseListCommand(ctx: Context) {
    this.logger.log('—Ä–∞—Å—Ö–æ–¥—ã command executed');
    const userId = ctx.from.id;
    await this.transactionService.getTransactionsByType(userId, TransactionType.EXPENSE);
    this.logger.log('—Ä–∞—Å—Ö–æ–¥—ã command executed');
  }
  @Action('–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
  async categoryListCommand(ctx: Context) {
    const userId = ctx.from.id;
    const uniqueTransactionNames = await this.transactionService.getUniqueTransactionNames(userId);
    const transactionNameButtons = actionButtonsTransactionNames(uniqueTransactionNames);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionNameButtons);
  }
  @Action(/TransactionName:(.+)/)
  async transactionNameCommand(ctx: Context) {
    this.logger.log('transactionName command executed');
    const callbackQuery: CustomCallbackQuery = ctx.callbackQuery as CustomCallbackQuery;
    if (callbackQuery) {
      const callbackData = callbackQuery.data;
      const parts = callbackData.split(':');
      const selectedTransactionName = parts[1];
      const userId = ctx.from.id;
      await this.transactionService.getTransactionsByTransactionName(userId, selectedTransactionName);
    } else {
      this.logger.log('callbackQuery is undefined');
    }
  }
  @Action('–ó–∞ —Å–µ–≥–æ–¥–Ω—è')
  async todayListCommand(ctx: Context) {
    this.logger.log('today command executed');
    const userId = ctx.from.id;
    await this.transactionService.getFormattedTransactionsForToday(userId);
    this.logger.log('today command executed');
  }
  @Action('–ó–∞ –Ω–µ–¥–µ–ª—é')
  async weekListCommand(ctx: Context) {
    this.logger.log('week command executed');
    const userId = ctx.from.id;
    await this.transactionService.getFormattedTransactionsForWeek(userId);
    this.logger.log('week command executed');
  }
  @Action('–ó–∞ –º–µ—Å—è—Ü')
  async monthListCommand(ctx: Context) {
    this.logger.log('month command executed');
    const userId = ctx.from.id;
    await this.transactionService.getFormattedTransactionsForMonth(userId);
    this.logger.log('month command executed');
  }
  @Action('–í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü')
  async monthListMenuCommand(ctx: Context) {
    this.logger.log('month menu command executed');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:', actionButtonsMonths());
  }
  @Action(/Month:(.+)/)
  async specificMonthListCommand(ctx: Context) {
    this.logger.log('specific month command executed');
    const callbackQuery: CustomCallbackQuery = ctx.callbackQuery as CustomCallbackQuery;
    if (callbackQuery) {
      const callbackData = callbackQuery.data;
      const parts = callbackData.split(':');
      const selectedMonth = Number(parts[1]);
      const userId = ctx.from.id;

      const fromDate = new Date();
      fromDate.setMonth(selectedMonth - 1);
      fromDate.setDate(1);
      fromDate.setHours(0, 0, 0, 0);

      const toDate = new Date();
      toDate.setMonth(selectedMonth);
      toDate.setDate(0);
      toDate.setHours(23, 59, 59, 999);

      await this.transactionService.getTransactionsByPeriod(userId, fromDate, toDate);
    } else {
      this.logger.log('callbackQuery is undefined');
    }
  }
  @Hears('–ë–∞–ª–∞–Ω—Å üí∞')
  async listCommand(ctx: Context) {
    try {
      await ctx.deleteMessage();
      const userId = ctx.from.id;
      await this.balanceService.getBalance(userId);
      ctx.session.type = 'balance';
      await ctx.reply('–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π? –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä: ', actionButtonsStatistics());
      this.logger.log('–ë–∞–ª–∞–Ω—Å command executed');
    } catch (error) {
      this.logger.error('Error in listCommand:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    }
  }
  @On('text')
  async textCommand(ctx: Context) {
    if (ctx.session.type !== 'income' && ctx.session.type !== 'expense') {
      return;
    }
    const message = ctx.message as MyMessage;
    const userId = ctx.from.id;
    const text = message.text;
    const regex = /^([a-zA-Z–∞-—è–ê-–Ø]+(?:\s+[a-zA-Z–∞-—è–ê-–Ø]+)?)\s+([\d.]+)$/;
    const matches = text.match(regex);
    if (!matches) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      return;
    }
    const transactionName = matches[1].trim().toLowerCase();
    const amount = Number(matches[matches.length - 1]);
    if (!transactionName || isNaN(amount) || amount <= 0) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      return;
    }
    const words = transactionName.split(' ');
    if (words.length > 2) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –¥–≤–∞ —Å–ª–æ–≤–∞ –≤ –ø–æ–ª–µ "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏".');
      return;
    }
    const transactionType = ctx.session.type === 'income' ? TransactionType.INCOME : TransactionType.EXPENSE;
    try {
      await this.transactionService.createTransaction({
        userId,
        transactionName,
        transactionType,
        amount,
      });
      await this.balanceService.updateBalance(userId, amount, transactionType);
      await this.balanceService.getBalance(userId);
      await ctx.deleteMessage();
      delete ctx.session.type;
      this.logger.log('textCommand executed');
    } catch (error) {
      this.logger.error('Error in textCommand:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    }
  }
}
