import { TransactionService } from './transaction.service';
import { Action, Hears, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { Telegraf } from 'telegraf';
import {
  actionButtonsStart,
  actionButtonsStatistics,
  actionButtonsTransaction,
  actionButtonsTransactionNames,
} from './app.buttons';
import { PinoLoggerService } from './loger/pino.loger.service';
import { MyMessage } from './interface/my-message.interface';
import { TransactionType } from './mongodb/shemas';
import { Context, CustomCallbackQuery } from './interface/context.interfsce';

@Update()
export class AppUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly transactionService: TransactionService,
    private readonly logger: PinoLoggerService,
  ) {
    this.logger.setContext('Command');
  }

  @Start()
  async startCommand(ctx: Context) {
    try {
      const userId = ctx.from.id;
      await this.transactionService.createBalance({ userId });
      await ctx.reply(
        '\n' +
          'üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ–º–∞—à–Ω–µ–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏! üëõ\n' +
          '\n' +
          '–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Å–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∏—Ö–æ–¥—ã üí∞ –∏ —Ä–∞—Å—Ö–æ–¥—ã üí∏, ' +
          '\n–∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.\n' +
          '\n' +
          '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è" –∏ –¥–∞–ª–µ–µ "–ü—Ä–∏—Ö–æ–¥" –∏–ª–∏ "–†–∞—Å—Ö–æ–¥" –≤ –º–µ–Ω—é –Ω–∏–∂–µ. üòä',
        actionButtonsStart(),
      );
      await ctx.deleteMessage();
      delete ctx.session.type;
      this.logger.log('startCommand executed successfully');
    } catch (error) {
      this.logger.error('Error in startCommand:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    }
  }
  @Hears('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è üí∏')
  async aboutCommand(ctx: Context) {
    await ctx.deleteMessage();
    delete ctx.session.type;
    this.logger.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è command executed');
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é', actionButtonsTransaction());
  }
  @Action('–ü—Ä–∏—Ö–æ–¥')
  async incomeCommand(ctx: Context) {
    ctx.session.type = 'income';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª' + '\n' + '–ü—Ä–∏–º–µ—Ä: "–ó–∞—Ä–ø–ª–∞—Ç–∞ 100000"');
    this.logger.log('–ü—Ä–∏—Ö–æ–¥ command executed');
    await ctx.deleteMessage();
  }
  @Action('–†–∞—Å—Ö–æ–¥')
  async expenseCommand(ctx: Context) {
    ctx.session.type = 'expense';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª' + '\n' + '–ü—Ä–∏–º–µ—Ä: "–ü—Ä–æ–¥—É–∫—Ç—ã 1000"');
    this.logger.log('–†–∞—Å—Ö–æ–¥ command executed');
    await ctx.deleteMessage();
  }
  @Action('–ú–æ–∏ –ø—Ä–∏—Ö–æ–¥—ã')
  async incomeListCommand(ctx: Context) {
    this.logger.log('–ø—Ä–∏—Ö–æ–¥—ã command executed');
    const userId = ctx.from.id;
    await this.transactionService.getTransactionsByType(userId, TransactionType.INCOME);
    this.logger.log('–ø—Ä–∏—Ö–æ–¥—ã command executed');
  }
  @Action('–ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã')
  async expenseListCommand(ctx: Context) {
    this.logger.log('—Ä–∞—Å—Ö–æ–¥—ã command executed');
    const userId = ctx.from.id;
    await this.transactionService.getTransactionsByType(userId, TransactionType.EXPENSE);
    this.logger.log('—Ä–∞—Å—Ö–æ–¥—ã command executed');
  }
  @Action('–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
  async categoryListCommand(ctx: Context) {
    const userId = ctx.from.id;
    const uniqueTransactionNames = await this.transactionService.getUniqueTransactionNames(userId);
    const transactionNameButtons = actionButtonsTransactionNames(uniqueTransactionNames);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionNameButtons);
  }

  @Action(/TransactionName:(.+)/)
  async transactionNameCommand(ctx: Context) {
    this.logger.log('transactionName command executed');
    const callbackQuery: CustomCallbackQuery = ctx.callbackQuery as CustomCallbackQuery;
    if (callbackQuery) {
      const callbackData = callbackQuery.data;
      const parts = callbackData.split(':');
      const selectedTransactionName = parts[1];
      const userId = ctx.from.id;
      await this.transactionService.getTransactionsByTransactionName(userId, selectedTransactionName);
    } else {
      this.logger.log('callbackQuery is undefined');
    }
  }
  @Action('–ó–∞ —Å–µ–≥–æ–¥–Ω—è')
  async todayListCommand(ctx: Context) {
    this.logger.log('today command executed');
    const userId = ctx.from.id;
    await this.transactionService.getFormattedTransactionsForToday(userId);
    this.logger.log('today command executed');
  }
  @Action('–ó–∞ –Ω–µ–¥–µ–ª—é')
  async weekListCommand(ctx: Context) {
    this.logger.log('week command executed');
    const userId = ctx.from.id;

    await this.transactionService.getFormattedTransactionsForWeek(userId);

    this.logger.log('week command executed');
  }
  @Action('–ó–∞ –º–µ—Å—è—Ü')
  async monthListCommand(ctx: Context) {
    this.logger.log('month command executed');
    const userId = ctx.from.id;

    await this.transactionService.getFormattedTransactionsForMonth(userId);

    this.logger.log('month command executed');
  }

  @Hears('–ë–∞–ª–∞–Ω—Å üí∞')
  async listCommand(ctx: Context) {
    try {
      await ctx.deleteMessage();
      const userId = ctx.from.id;
      await this.transactionService.getBalance(userId);
      ctx.session.type = 'balance';
      await ctx.reply('–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π? –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä: ', actionButtonsStatistics());
      this.logger.log('–ë–∞–ª–∞–Ω—Å command executed');
    } catch (error) {
      this.logger.error('Error in listCommand:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    }
  }
  @On('text')
  async textCommand(ctx: Context) {
    if (ctx.session.type !== 'income' && ctx.session.type !== 'expense') {
      return;
    }
    const message = ctx.message as MyMessage;
    const userId = ctx.from.id;
    const text = message.text;
    const regex = /^([a-zA-Z–∞-—è–ê-–Ø]+(?:\s+[a-zA-Z–∞-—è–ê-–Ø]+)?)\s+([\d.]+)$/;
    const matches = text.match(regex);
    if (!matches) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      return;
    }
    const transactionName = matches[1].trim().toLowerCase(); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    const amount = Number(matches[matches.length - 1]);
    if (!transactionName || isNaN(amount) || amount <= 0) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      return;
    }
    const words = transactionName.split(' ');
    if (words.length > 2) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –¥–≤–∞ —Å–ª–æ–≤–∞ –≤ –ø–æ–ª–µ "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏".');
      return;
    }
    const transactionType = ctx.session.type === 'income' ? TransactionType.INCOME : TransactionType.EXPENSE;
    try {
      await this.transactionService.createTransaction({
        userId,
        transactionName,
        transactionType,
        amount,
      });
      await this.transactionService.updateBalance(userId, amount, transactionType);
      await this.transactionService.getBalance(userId);

      await ctx.deleteMessage();
      delete ctx.session.type;
      this.logger.log('textCommand executed');
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      this.logger.error('Error in textCommand:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.');
    }
  }
}
